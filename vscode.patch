diff --git a/src/vs/workbench/api/browser/viewsExtensionPoint.ts b/src/vs/workbench/api/browser/viewsExtensionPoint.ts
index 5fc7d5d..729ed0b 100644
--- a/src/vs/workbench/api/browser/viewsExtensionPoint.ts
+++ b/src/vs/workbench/api/browser/viewsExtensionPoint.ts
@@ -72,6 +72,11 @@ export const viewsContainersContribution: IJSONSchema = {
 			type: 'array',
 			items: viewsContainerSchema
 		},
+		'auxiliarybar': {
+			description: localize('views.container.auxiliarybar', "Contribute views containers to Secondary Side Bar"),
+			type: 'array',
+			items: viewsContainerSchema
+		},
 		'panel': {
 			description: localize('views.container.panel', "Contribute views containers to Panel"),
 			type: 'array',
@@ -339,6 +344,7 @@ class ViewsExtensionHandler implements IWorkbenchContribution {
 		const viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);
 		let activityBarOrder = CUSTOM_VIEWS_START_ORDER + viewContainersRegistry.all.filter(v => !!v.extensionId && viewContainersRegistry.getViewContainerLocation(v) === ViewContainerLocation.Sidebar).length;
 		let panelOrder = 5 + viewContainersRegistry.all.filter(v => !!v.extensionId && viewContainersRegistry.getViewContainerLocation(v) === ViewContainerLocation.Panel).length + 1;
+		let auxiliaryBarOrder = viewContainersRegistry.all.filter(v => !!v.extensionId && viewContainersRegistry.getViewContainerLocation(v) === ViewContainerLocation.AuxiliaryBar).length + 1;
 		for (const { value, collector, description } of extensionPoints) {
 			Object.entries(value).forEach(([key, value]) => {
 				if (!this.isValidViewsContainer(value, collector)) {
@@ -351,6 +357,8 @@ class ViewsExtensionHandler implements IWorkbenchContribution {
 					case 'panel':
 						panelOrder = this.registerCustomViewContainers(value, description, panelOrder, existingViewContainers, ViewContainerLocation.Panel);
 						break;
+					case 'auxiliarybar':
+						auxiliaryBarOrder = this.registerCustomViewContainers(value, description, auxiliaryBarOrder, existingViewContainers, ViewContainerLocation.AuxiliaryBar);
 				}
 			});
 		}
diff --git a/src/vs/workbench/api/worker/extensionHostWorker.ts b/src/vs/workbench/api/worker/extensionHostWorker.ts
index 998b53a..33d7480 100644
--- a/src/vs/workbench/api/worker/extensionHostWorker.ts
+++ b/src/vs/workbench/api/worker/extensionHostWorker.ts
@@ -41,7 +41,6 @@ const nativeClose = self.close.bind(self);
 self.close = () => console.trace(`'close' has been blocked`);
 
 const nativePostMessage = postMessage.bind(self);
-self.postMessage = () => console.trace(`'postMessage' has been blocked`);
 
 function shouldTransformUri(uri: string): boolean {
 	// In principle, we could convert any URI, but we have concerns
@@ -77,9 +76,6 @@ function patchFetching(asBrowserUri: (uri: URI) => Promise<URI>) {
 
 self.importScripts = () => { throw new Error(`'importScripts' has been blocked`); };
 
-// const nativeAddEventListener = addEventListener.bind(self);
-self.addEventListener = () => console.trace(`'addEventListener' has been blocked`);
-
 (<any>self)['AMDLoader'] = undefined;
 (<any>self)['NLSLoaderPlugin'] = undefined;
 (<any>self)['define'] = undefined;
diff --git a/src/vs/workbench/contrib/webview/browser/pre/index.html b/src/vs/workbench/contrib/webview/browser/pre/index.html
index 8e3d08e..1185d47 100644
--- a/src/vs/workbench/contrib/webview/browser/pre/index.html
+++ b/src/vs/workbench/contrib/webview/browser/pre/index.html
@@ -4,9 +4,6 @@
 <head>
 	<meta charset="UTF-8">
 
-	<meta http-equiv="Content-Security-Policy"
-		content="default-src 'none'; script-src 'sha256-N4YFn5ze5crjPqMK/opogKs7bSGWtf3lmjV/3LfbSOs=' 'self'; frame-src 'self'; style-src 'unsafe-inline';">
-
 	<!-- Disable pinch zooming -->
 	<meta name="viewport"
 		content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
@@ -205,9 +202,6 @@
 							});
 						};
 					})();
-					delete window.parent;
-					delete window.top;
-					delete window.frameElement;
 				`;
 		}
 
@@ -355,12 +349,7 @@
 					throw err instanceof Error ? err : new Error(String(err));
 				}
 
-				if (hostname === parentOriginHash || hostname.startsWith(parentOriginHash + '.')) {
-					// validation succeeded!
-					return start(parentOrigin);
-				}
-
-				throw new Error(`Expected '${parentOriginHash}' as hostname or subdomain!`);
+				return start(parentOrigin);
 			}
 		}();
 
diff --git a/src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html b/src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html
index 576bad1..0f29ae7 100644
--- a/src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html
+++ b/src/vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html
@@ -1,12 +1,5 @@
 <!DOCTYPE html>
 <html>
-	<head>
-		<meta http-equiv="Content-Security-Policy" content="
-			default-src 'none';
-			child-src 'self' data: blob:;
-			script-src 'self' 'unsafe-eval' 'sha256-/r7rqQ+yrxt57sxLuQ6AMYcy/lUpvAIzHjIJt/OeLWU=' https:;
-			connect-src 'self' https: wss: http://localhost:* http://127.0.0.1:* ws://localhost:* ws://127.0.0.1:*;"/>
-	</head>
 	<body>
 	<script>
 (function() {
@@ -17,11 +10,24 @@
 	const salt = searchParams.get('salt');
 
 	(async function() {
+		const memoryReceiveTimeout = 500; // ms
+		const memory = await new Promise((resolve, reject) => {
+			const timer = setTimeout(() => {
+				reject(new Error('timed out.'));
+			}, memoryReceiveTimeout);
+			window.addEventListener('message', function listener(event) {
+				if (event.data instanceof WebAssembly.Memory) {
+					clearTimeout(timer);
+					window.removeEventListener('message', listener);
+					resolve(event.data);
+				}
+			});
+		}).catch(() => { /* no memory, ignore */ })
 		const hostnameValidationMarker = 'v--';
 		const hostname = location.hostname;
 		if (!hostname.startsWith(hostnameValidationMarker)) {
 			// validation not requested
-			return start();
+			return start(memory);
 		}
 		if (!crypto.subtle) {
 			// cannot validate, not running in a secure context
@@ -47,7 +53,7 @@
 		const requiredSubdomain = `${hostnameValidationMarker}${parentOriginHash}.`;
 		if (hostname.substring(0, requiredSubdomain.length) === requiredSubdomain) {
 			// validation succeeded!
-			return start();
+			return start(memory);
 		}
 
 		return sendError(new Error(`Expected '${requiredSubdomain}' as subdomain!`));
@@ -64,7 +70,7 @@
 		}, '*');
 	}
 
-	function start() {
+	function start(memory) {
 		try {
 			let workerUrl = '../../../../base/worker/workerMain.js';
 			if(globalThis.crossOriginIsolated) {
@@ -78,7 +84,10 @@
 			worker.onmessage = (event) => {
 				const { data } = event;
 
-				if (data?.type === '_newWorker') {
+				if (data?.type === '_memory') {
+					worker.postMessage(memory);
+					return;
+				} if (data?.type === '_newWorker') {
 					const { id, port, url, options } = data;
 					const newWorker = new Worker(url, options);
 					newWorker.postMessage(port, [port]);
